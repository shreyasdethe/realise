{"version":3,"sources":["Chat.js","Contacts.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Chat","props","chatJID","useState","msgBody","setMsgBody","sentMsg","setsentMsg","useEffect","window","conn","addHandler","handleOnMsg","send","$pres","tree","localStorage","chat","c","r","s","setItem","JSON","stringify","updateStoragechat","type","msg","parse","Object","keys","includes","push","getAttribute","elems","getElementsByTagName","length","body","msgText","Strophe","getText","toString","updateMsgDiv","cont","document","querySelector","newDiv","createElement","className","innerText","appendChild","onSubmit","e","preventDefault","target","value","reply","$msg","to","from","jid","flush","placeholder","onClick","setisNewChat","Contacts","authenticated","isLoggedIn","setisLoggedIn","isNewChat","newChatJID","setnewChatJID","stateContacts","setstateContacts","startNewChat","innerHTML","save","contacts","savedArray","split","ul","contact","newli","onclick","append","newJID","prompt","savedContacts","alert","style","marginTop","color","disconnect","Login","logInStatus","setLogInStatus","statusMessage","setStatusMessage","handleOnConnect","status","console","log","Status","CONNECTING","DISCONNECTED","setTimeout","DISCONNECTING","CONNECTED","CONNFAIL","AUTHFAIL","marginBottom","_u","username","_p","password","getItem","querySelectorAll","connect","name","autoComplete","onChange","href","rel","backgroundColor","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7768d26c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Chat.css\";\r\n\r\nconst Chat = (props) => {\r\n\tconst chatJID = props.chatJID;\r\n\tconst [msgBody, setMsgBody] = useState(\"\");\r\n\tconst [sentMsg, setsentMsg] = useState(\"\");\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.conn.addHandler(handleOnMsg, null, \"message\", null, null, null);\r\n\t\twindow.conn.send(window.$pres().tree());\r\n\r\n\t\tif (!window.localStorage.chat) {\r\n\t\t\tlet c = {\r\n\t\t\t\t[chatJID]: {\r\n\t\t\t\t\tr: [],\r\n\t\t\t\t\ts: [],\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t\twindow.localStorage.setItem(\"chat\", JSON.stringify(c));\r\n\t\t}\r\n\t}, []);\r\n\r\n\t// to update saved chat msg\r\n\tconst updateStoragechat = (type, msg) => {\r\n\t\tlet chat = JSON.parse(window.localStorage.chat);\r\n\t\tif (!Object.keys(chat).includes(chatJID)) {\r\n\t\t\tchat[chatJID] = {\r\n\t\t\t\tr: [],\r\n\t\t\t\ts: [],\r\n\t\t\t};\r\n\t\t\twindow.localStorage.setItem(\"chat\", JSON.stringify(chat));\r\n\t\t} else {\r\n\t\t\tif (type === \"r\") {\r\n\t\t\t\tchat[chatJID].r.push(msg);\r\n\t\t\t} else if (type === \"s\") {\r\n\t\t\t\tchat[chatJID].s.push(msg);\r\n\t\t\t}\r\n\t\t\twindow.localStorage.setItem(\"chat\", JSON.stringify(chat));\r\n\t\t}\r\n\t};\r\n\r\n\t// this useEffect is triggered eveytime msgBody changes\r\n\t// so this updates the divs for new received msgs\r\n\tuseEffect(() => {\r\n\t\tupdateStoragechat(\"r\", msgBody);\r\n\t}, [msgBody]);\r\n\r\n\t// same as above but for sent msgs\r\n\tuseEffect(() => {\r\n\t\tupdateStoragechat(\"s\", sentMsg);\r\n\t}, [sentMsg]);\r\n\r\n\t// handler for receiving messages - triggered when msg is received\r\n\tconst handleOnMsg = (msg) => {\r\n\t\tconst type = msg.getAttribute(\"type\");\r\n\t\tconst elems = msg.getElementsByTagName(\"body\");\r\n\r\n\t\tif (type === \"chat\" && elems.length > 0) {\r\n\t\t\tconst body = elems[0];\r\n\t\t\tlet msgText = window.Strophe.getText(body).toString();\r\n\t\t\tsetMsgBody(msgText);\r\n\t\t\tupdateMsgDiv(\"r\", msgText);\r\n\t\t}\r\n\r\n\t\t// return true needed if the handler is to be used again\r\n\t\t// return false will remove the handler after one use\r\n\t\treturn true;\r\n\t};\r\n\r\n\t// handler for sending message to server - triggered when send msg is clicked\r\n\tconst sendMsg = (e) => {\r\n\t\te.preventDefault();\r\n\t\tlet msgText = e.target.querySelector(\"input\").value;\r\n\t\tconst reply = window\r\n\t\t\t.$msg({\r\n\t\t\t\tto: chatJID,\r\n\t\t\t\tfrom: window.conn.jid,\r\n\t\t\t\ttype: \"chat\",\r\n\t\t\t})\r\n\t\t\t.c(\"body\", null, msgText);\r\n\r\n\t\tsetsentMsg(msgText);\r\n\t\tupdateMsgDiv(\"s\", msgText);\r\n\t\twindow.conn.send(window.$pres().tree());\r\n\t\twindow.conn.send(reply.tree());\r\n\t\twindow.conn.flush();\r\n\t\te.target.querySelector(\"input\").value = \"\";\r\n\t};\r\n\r\n\tconst updateMsgDiv = (type, msg) => {\r\n\t\tlet cont = document.querySelector(\".chats\");\r\n\t\tlet newDiv = document.createElement(\"div\");\r\n\t\tnewDiv.className = type === \"r\" ? \"recdMsg\" : \"sentMsg\";\r\n\t\tnewDiv.innerText = msg;\r\n\t\tcont.appendChild(newDiv);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='chat-container'>\r\n\t\t\t<h1 className='buddy-title'>{chatJID}</h1>\r\n\r\n\t\t\t<div className='chats'>\r\n\t\t\t\t{/* <div className='recd-msg'>{msgBody}</div> */}\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className='send-msg'>\r\n\t\t\t\t<form onSubmit={sendMsg}>\r\n\t\t\t\t\t<input type='text' placeholder='Start typing...'></input>\r\n\t\t\t\t\t<button type='submit'>Send</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<button\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tprops.setisNewChat(false);\r\n\t\t\t\t}}>\r\n\t\t\t\tBack\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Chat;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Contacts.css\";\r\nimport Chat from \"./Chat\";\r\n\r\nconst Contacts = () => {\r\n\t// This isLoggedIn is needed to disconnect and go back to login page\r\n\tconst [isLoggedIn, setisLoggedIn] = useState(window.conn.authenticated);\r\n\tconst [isNewChat, setisNewChat] = useState(false);\r\n\tconst [newChatJID, setnewChatJID] = useState(\"\");\r\n\tconst [stateContacts, setstateContacts] = useState([]);\r\n\r\n\t// Add new contacts function\r\n\tconst addNewContact = () => {\r\n\t\tlet save = window.localStorage;\r\n\t\tconst newJID = prompt(\"Please enter new contact\");\r\n\r\n\t\tlet savedContacts = save.contacts;\r\n\t\tlet savedArray = savedContacts.split(\"/\");\r\n\t\tif (newJID !== null) {\r\n\t\t\tif (savedArray.includes(newJID)) {\r\n\t\t\t\talert(\"Contact is already saved\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsave.setItem(\"contacts\", savedContacts + newJID + \"/\");\r\n\t\t}\r\n\r\n\t\tsavedArray = save.contacts.split(\"/\");\r\n\t\tsetstateContacts(savedArray);\r\n\t};\r\n\r\n\tconst startNewChat = (e) => {\r\n\t\tsetnewChatJID(e.target.innerHTML);\r\n\t\tsetisNewChat(true);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tlet save = window.localStorage;\r\n\t\tif (!save.contacts) {\r\n\t\t\tsave.setItem(\"contacts\", \"\");\r\n\t\t}\r\n\r\n\t\tlet savedContacts = save.contacts;\r\n\t\tlet savedArray = savedContacts.split(\"/\");\r\n\t\tif (stateContacts.length === 0) {\r\n\t\t\tsetstateContacts(savedArray);\r\n\t\t}\r\n\r\n\t\tif (isNewChat === false) {\r\n\t\t\tconst ul = document.querySelector(\".contacts-list\");\r\n\t\t\tul.innerHTML = \"\";\r\n\t\t\tfor (const contact of stateContacts) {\r\n\t\t\t\tif (contact !== null && contact !== \"\") {\r\n\t\t\t\t\tconst newli = document.createElement(\"li\");\r\n\t\t\t\t\tnewli.innerHTML = contact;\r\n\t\t\t\t\tnewli.onclick = startNewChat;\r\n\t\t\t\t\tul.append(newli);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}, [stateContacts, isNewChat]);\r\n\r\n\tif (isLoggedIn) {\r\n\t\tif (isNewChat) {\r\n\t\t\treturn <Chat chatJID={newChatJID} setisNewChat={setisNewChat} />;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className='contacts-container'>\r\n\t\t\t\t<h1 className='contacts-heading'>Contacts</h1>\r\n\r\n\t\t\t\t<ul className='contacts-list'></ul>\r\n\t\t\t\t{/* Buttons for add contacts and disconnect */}\r\n\t\t\t\t<button className='contacts-add-button' onClick={addNewContact}>\r\n\t\t\t\t\tAdd Contacts\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='contacts-add-button'\r\n\t\t\t\t\tstyle={{ marginTop: \"5px\", color: \"#f36363\" }}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\twindow.conn.disconnect();\r\n\t\t\t\t\t\tsetisLoggedIn(false);\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tLogout\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nexport default Contacts;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Contacts from \"./Contacts\";\r\n\r\n// Sign up on xmpp.jp\r\n// https://www.xmpp.jp/signup\r\n\r\nconst Login = () => {\r\n\tconst [logInStatus, setLogInStatus] = useState(\"not-log\");\r\n\tconst [statusMessage, setStatusMessage] = useState(\"\");\r\n\r\n\t// Handler function when connecting\r\n\tconst handleOnConnect = (status) => {\r\n\t\tconsole.log(status);\r\n\t\tif (status === window.Strophe.Status.CONNECTING) {\r\n\t\t\tsetLogInStatus(\"no-log\");\r\n\t\t\tsetStatusMessage(\"Connecting...\");\r\n\t\t} else if (status === window.Strophe.Status.DISCONNECTED) {\r\n\t\t\tsetLogInStatus(\"no-log\");\r\n\t\t\tsetStatusMessage(\"Disconnected\");\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetStatusMessage(\"\");\r\n\t\t\t}, 3000);\r\n\t\t} else if (status === window.Strophe.Status.DISCONNECTING) {\r\n\t\t\tsetLogInStatus(\"no-log\");\r\n\t\t\tsetStatusMessage(\"Disconnecting...\");\r\n\t\t} else if (status === window.Strophe.Status.CONNECTED) {\r\n\t\t\tsetLogInStatus(\"log\");\r\n\t\t\tsetStatusMessage(\"Connected successfully\");\r\n\t\t} else if (status === window.Strophe.Status.CONNFAIL) {\r\n\t\t\tsetLogInStatus(\"fail\");\r\n\t\t\tsetStatusMessage(\"Connection failed, check internet connection\");\r\n\t\t} else if (status === window.Strophe.Status.AUTHFAIL) {\r\n\t\t\tsetLogInStatus(\"fail\");\r\n\t\t\tsetStatusMessage(\"Authentication failed, check username and/or password\");\r\n\t\t} else {\r\n\t\t\tsetLogInStatus(\"no-log\");\r\n\t\t}\r\n\t};\r\n\r\n\t// Handler function for login form\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\t// Get username and password from form\r\n\t\t// and check for empty fields\r\n\t\tlet _u = e.target.username.value;\r\n\t\tlet _p = e.target.password.value;\r\n\r\n\t\t// creds are stored as browser storage\r\n\t\t// !IMP -> have to increase security\r\n\t\tlet save = window.localStorage;\r\n\t\tif (save.length === 0) {\r\n\t\t\tsave.setItem(\"user\", _u);\r\n\t\t\tsave.setItem(\"pass\", _p);\r\n\t\t} else {\r\n\t\t\tif (save.getItem(\"user\") !== \"\" && save.getItem(\"pass\") !== \"\") {\r\n\t\t\t\t_u = save.getItem(\"user\");\r\n\t\t\t\t_p = save.getItem(\"pass\");\r\n\t\t\t\tdocument.querySelectorAll(\".inputField\")[0].innerHTML = _u;\r\n\t\t\t\tdocument.querySelectorAll(\".inputField\")[1].innerHTML = _p;\r\n\t\t\t} else {\r\n\t\t\t\tsave.setItem(\"user\", _u);\r\n\t\t\t\tsave.setItem(\"pass\", _p);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!_u || !_p) {\r\n\t\t\tsetLogInStatus(\"fail\");\r\n\t\t\tsetStatusMessage(\"No credentials saved. Fields cannot be empty\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Connect with the username and password\r\n\t\twindow.conn.connect(_u, _p, handleOnConnect);\r\n\t};\r\n\r\n\t// If connected properly only then render the Contacts page\r\n\tif (logInStatus === \"log\") {\r\n\t\treturn <Contacts />;\r\n\t}\r\n\r\n\t// Else render the login page with input fields\r\n\telse {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<h1 className='greeting1'>Realise!</h1>\r\n\t\t\t\t\t<p style={{ marginBottom: 20 }}>Please login to continue</p>\r\n\t\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tname='username'\r\n\t\t\t\t\t\t\tplaceholder='username@xmpp.jp'\r\n\t\t\t\t\t\t\tautoComplete='username'\r\n\t\t\t\t\t\t\tclassName='inputField'\r\n\t\t\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\t\t\tsetLogInStatus(\"not-log\");\r\n\t\t\t\t\t\t\t\tsetStatusMessage(\"\");\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype='password'\r\n\t\t\t\t\t\t\tname='password'\r\n\t\t\t\t\t\t\tplaceholder='password'\r\n\t\t\t\t\t\t\tautoComplete='current-password'\r\n\t\t\t\t\t\t\tclassName='inputField'\r\n\t\t\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\t\t\tsetLogInStatus(\"not-log\");\r\n\t\t\t\t\t\t\t\tsetStatusMessage(\"\");\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t\tclassName='loginButton'\r\n\t\t\t\t\t\t\tvalue='Login (or Autofill)'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\thref='https://www.xmpp.jp/signup'\r\n\t\t\t\t\t\t\ttarget='_blank'\r\n\t\t\t\t\t\t\trel='noopener noreferrer'>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\t\t\tclassName='loginButton'\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tbackgroundColor: \"#d5ccfc\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tvalue='Register'\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='login-fail'>{statusMessage}</div>\r\n\t\t\t\t<footer>Realise! &copy; 2020 github.com/shreyasdethe</footer>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\nimport Login from \"./Login\";\nimport \"./App.css\";\n// import Contacts from \"./Contacts\";\n\nconst App = () => {\n\treturn <Login />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}